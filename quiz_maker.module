<?php

/**
 * @file
 * Primary module hooks for Quiz Maker module.
 */

use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 * Implements hook_page_attachments().
 *
 * Add Quiz CSS to all pages.
 */
function quiz_maker_page_attachments(&$page): void {
  $page['#attached']['library'][] = 'quiz_maker/styles';
}

/**
 * Implements hook_theme().
 */
function quiz_maker_theme(): array {
  return [
    'quiz' => ['render element' => 'elements'],
    'question' => ['render element' => 'elements'],
    'question_answer' => ['render element' => 'elements'],
    'quiz_result' => ['render element' => 'elements'],
    'question_response' => ['render element' => 'elements'],
  ];
}

/**
 * Prepares variables for quiz templates.
 *
 * Default template: quiz-maker-quiz.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the quiz information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_quiz(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function quiz_maker_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish quizzes.
      $storage = \Drupal::entityTypeManager()->getStorage('quiz');
      $quiz_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($quiz_ids) as $quiz) {
        $quiz->set('status', FALSE)->save();
      }

      // Unpublish questions.
      $storage = \Drupal::entityTypeManager()->getStorage('question');
      $question_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($question_ids) as $question) {
        $question->set('status', FALSE)->save();
      }

      // Unpublish question answers.
      $storage = \Drupal::entityTypeManager()->getStorage('question_answer');
      $question_answer_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($question_answer_ids) as $question_answer) {
        $question_answer->set('status', FALSE)->save();
      }

      // Unpublish quiz results.
      $storage = \Drupal::entityTypeManager()->getStorage('quiz_result');
      $quiz_result_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($quiz_result_ids) as $quiz_result) {
        $quiz_result->set('status', FALSE)->save();
      }

      // Unpublish question responses.
      $storage = \Drupal::entityTypeManager()->getStorage('question_response');
      $question_response_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($question_response_ids) as $question_response) {
        $question_response->set('status', FALSE)->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize quizzes.
      $storage = \Drupal::entityTypeManager()->getStorage('quiz');
      $quiz_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($quiz_ids) as $quiz) {
        $quiz->setOwnerId(0)->save();
      }

      // Anonymize questions.
      $storage = \Drupal::entityTypeManager()->getStorage('question');
      $question_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($question_ids) as $question) {
        $question->setOwnerId(0)->save();
      }

      // Anonymize question answers.
      $storage = \Drupal::entityTypeManager()->getStorage('question_answer');
      $question_answer_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($question_answer_ids) as $question_answer) {
        $question_answer->setOwnerId(0)->save();
      }

      // Anonymize quiz results.
      $storage = \Drupal::entityTypeManager()->getStorage('quiz_result');
      $quiz_result_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($quiz_result_ids) as $quiz_result) {
        $quiz_result->setOwnerId(0)->save();
      }

      // Anonymize question responses.
      $storage = \Drupal::entityTypeManager()->getStorage('question_response');
      $question_response_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($question_response_ids) as $question_response) {
        $question_response->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function quiz_maker_user_predelete(UserInterface $account): void {
  // Delete quizzes that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('quiz');
  $quiz_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($quiz_ids)
  );

  // Delete old revisions.
  $quiz_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($quiz_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }

  // Delete questions that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('question');
  $question_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($question_ids)
  );

  // Delete old revisions.
  $question_ids = $storage->getQuery()
    ->allRevisions()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  foreach (array_keys($question_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }

  // Delete question answers that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('question_answer');
  $question_answer_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($question_answer_ids)
  );

  // Delete quiz results that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('quiz_result');
  $quiz_result_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($quiz_result_ids)
  );

  // Delete question responses that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('question_response');
  $question_response_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($question_response_ids)
  );
}

/**
 * Prepares variables for question templates.
 *
 * Default template: quiz-maker-question.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the question information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_question(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for question answer templates.
 *
 * Default template: quiz-maker-question-answer.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the question answer information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_question_answer(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for quiz result templates.
 *
 * Default template: quiz-maker-quiz-result.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the quiz result information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_quiz_result(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 *
 * Map question and answers classes to bundles.
 */
function quiz_maker_entity_bundle_info_alter(array &$bundles): void {
  $plugin_types = [
    'question' => 'plugin.manager.quiz_maker.question',
    'question_answer' => 'plugin.manager.quiz_maker.question_answer',
    'question_response' => 'plugin.manager.quiz_maker.question_response',
  ];

  foreach ($plugin_types as $plugin_type => $plugin_manager) {
    $pluginManager = \Drupal::service($plugin_manager);
    $plugins = $pluginManager->getDefinitions();
    foreach ($plugins as $key => $plugin) {
      if (isset($bundles[$plugin_type][$key])) {
        $bundles[$plugin_type][$key]['class'] = $plugin['class'];
      }
    }
  }

}

/**
 * Prepares variables for question response templates.
 *
 * Default template: quiz-maker-question-response.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the question response information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_question_response(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function quiz_maker_preprocess_quiz_result(array &$variables) {
  /** @var \Drupal\quiz_maker\QuizResultInterface $quiz_result */
  $quiz_result = $variables["elements"]["#quiz_result"];
  $score = $quiz_result->getScore();
  $quiz = $quiz_result->getQuiz();
  $pass_rate = $quiz->getPassRate();
  $variables["content"]['pass_rate'] = [
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#value' => $score >= $pass_rate ? "Yes" : "No",
  ];
}
